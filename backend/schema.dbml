Project "None" {
  database_type: 'SQLite'
  Note: '''None
  Last Updated At 05-27-2025 12:32AM UTC'''
}

enum accounts.char_customuser_deposit_amount {
  "under_100k" [note: '''10만원 미만''']
  "100k_500k" [note: '''10~50만원''']
  "500k_1m" [note: '''50~100만원''']
  "over_1m" [note: '''100만원 이상''']
}

enum accounts.char_customuser_deposit_period {
  "under_6m" [note: '''6개월 미만''']
  "6m_12m" [note: '''6~12개월''']
  "1y_2y" [note: '''1~2년''']
  "over_2y" [note: '''2년 이상''']
}

enum accounts.char_customuser_gender {
  "M" [note: '''남성''']
  "F" [note: '''여성''']
}

enum accounts.char_customuser_salary {
  "under_30m" [note: '''3천만원 미만''']
  "30m_50m" [note: '''3천만원~5천만원''']
  "50m_100m" [note: '''5천만원~1억원''']
  "over_100m" [note: '''1억원 이상''']
}

enum accounts.char_customuser_tendency {
  "safe" [note: '''안정형''']
  "neutral" [note: '''중립형''']
  "aggressive" [note: '''공격형''']
}

enum accounts.char_customuser_wealth {
  "under_10m" [note: '''1천만원 미만''']
  "10m_30m" [note: '''1천~3천만원''']
  "30m_50m" [note: '''3천~5천만원''']
  "50m_100m" [note: '''5천~1억원''']
  "over_100m" [note: '''1억원 이상''']
}

enum admin.positive_small_integer_logentry_action_flag {
  "1" [note: '''Addition''']
  "2" [note: '''Change''']
  "3" [note: '''Deletion''']
}

enum community.char_article_category {
  "REVIEW" [note: '''예적금 상품 후기''']
  "TIP" [note: '''급전 절약/생활 꿀팁''']
  "FREE" [note: '''자유게시판''']
}

enum socialaccount.char_socialapp_provider {
  "google" [note: '''Google''']
}

Table account.EmailAddress {
  Note: '''
EmailAddress(id, user, email, verified, primary)

*DB table: account_emailaddress*'''

  id auto [pk, unique, not null]
  user_id foreign_key [not null]
  email email [not null]
  verified boolean [default:`False`, not null]
  primary boolean [default:`False`, not null]

  indexes {
    (id) [pk, unique, name: 'account_emailaddress_pkey', type: btree]
    () [name: 'account_emailaddress_upper', type: btree]
    (user_id) [name: 'account_emailaddress_user_id_2c513194', type: btree]
    (user_id,email) [unique, name: 'account_emailaddress_user_id_email_987c8728_uniq', type: btree]
  }
}
ref: account.EmailAddress.user_id > accounts.CustomUser.id


Table account.EmailConfirmation {
  Note: '''
EmailConfirmation(id, email_address, created, sent, key)

*DB table: account_emailconfirmation*'''

  id auto [pk, unique, not null]
  email_address_id foreign_key [not null]
  created date_time [default:`django.utils.timezone.now()`, not null]
  sent date_time [null]
  key char [unique, not null]

  indexes {
    (email_address_id) [name: 'account_emailconfirmation_email_address_id_5b7f8c58', type: btree]
    (key) [unique, name: 'account_emailconfirmation_key_key', type: btree]
    (id) [pk, unique, name: 'account_emailconfirmation_pkey', type: btree]
  }
}
ref: account.EmailConfirmation.email_address_id > account.EmailAddress.id


Table accounts.CustomUser {
  Note: '''
CustomUser(id, password, last_login, is_superuser, first_name, last_name, is_staff, is_active, date_joined, email, nickname, gender, salary, wealth, tendency, deposit_amount, deposit_period, has_completed_profile)

*DB table: accounts_customuser*'''

  id big_auto [pk, unique, not null]
  password char [not null]
  last_login date_time [null]
  is_superuser boolean [note: '''Designates that this user has all permissions without explicitly assigning them.''', default:`False`, not null]
  first_name char [not null]
  last_name char [not null]
  is_staff boolean [note: '''Designates whether the user can log into this admin site.''', default:`False`, not null]
  is_active boolean [note: '''Designates whether this user should be treated as active. Unselect this instead of deleting accounts.''', default:`True`, not null]
  date_joined date_time [default:`django.utils.timezone.now()`, not null]
  email email [unique, not null]
  nickname char [unique, not null]
  gender accounts.char_customuser_gender [not null]
  salary accounts.char_customuser_salary [not null]
  wealth accounts.char_customuser_wealth [not null]
  tendency accounts.char_customuser_tendency [not null]
  deposit_amount accounts.char_customuser_deposit_amount [not null]
  deposit_period accounts.char_customuser_deposit_period [not null]
  has_completed_profile boolean [default:`False`, not null]

  indexes {
    (email) [unique, name: 'accounts_customuser_email_key', type: btree]
    (nickname) [unique, name: 'accounts_customuser_nickname_key', type: btree]
    (id) [pk, unique, name: 'accounts_customuser_pkey', type: btree]
  }
}


Table accounts.customuser_groups {
  Note: '''
This is a Many-To-Many linking table autogenerated by Django.

*DB table: accounts_customuser_groups*'''

  id auto [pk, not null]
  group_id auto
  customuser_id auto

  indexes {
    (customuser_id) [name: 'accounts_customuser_groups_customuser_id_bc55088e', type: btree]
    (customuser_id,group_id) [unique, name: 'accounts_customuser_groups_customuser_id_group_id_c074bdcb_uniq', type: btree]
    (group_id) [name: 'accounts_customuser_groups_group_id_86ba5f9e', type: btree]
    (id) [pk, unique, name: 'accounts_customuser_groups_pkey', type: btree]
  }
}
ref: accounts.CustomUser.id > accounts.customuser_groups.customuser_id
ref: auth.Group.id > accounts.customuser_groups.group_id


Table accounts.customuser_user_permissions {
  Note: '''
This is a Many-To-Many linking table autogenerated by Django.

*DB table: accounts_customuser_user_permissions*'''

  id auto [pk, not null]
  permission_id auto
  customuser_id auto

  indexes {
    (customuser_id) [name: 'accounts_customuser_user_permissions_customuser_id_0deaefae', type: btree]
    (customuser_id,permission_id) [unique, name: 'accounts_customuser_user_permissions_customuser_id_permission_id_9632a709_uniq', type: btree]
    (permission_id) [name: 'accounts_customuser_user_permissions_permission_id_aea3d0e5', type: btree]
    (id) [pk, unique, name: 'accounts_customuser_user_permissions_pkey', type: btree]
  }
}
ref: accounts.CustomUser.id > accounts.customuser_user_permissions.customuser_id
ref: auth.Permission.id > accounts.customuser_user_permissions.permission_id


Table admin.LogEntry {
  Note: '''
LogEntry(id, action_time, user, content_type, object_id, object_repr, action_flag, change_message)

*DB table: django_admin_log*'''

  id auto [pk, unique, not null]
  action_time date_time [default:`django.utils.timezone.now()`, not null]
  user_id foreign_key [not null]
  content_type_id foreign_key [null]
  object_id text [null]
  object_repr char [not null]
  action_flag admin.positive_small_integer_logentry_action_flag [not null]
  change_message text [not null]

  indexes {
    (content_type_id) [name: 'django_admin_log_content_type_id_c4bce8eb', type: btree]
    (id) [pk, unique, name: 'django_admin_log_pkey', type: btree]
    (user_id) [name: 'django_admin_log_user_id_c564eba6', type: btree]
  }
}
ref: admin.LogEntry.user_id > accounts.CustomUser.id
ref: admin.LogEntry.content_type_id > contenttypes.ContentType.id


Table auth.Group {
  Note: '''
Groups are a generic way of categorizing users to apply permissions, or
some other label, to those users. A user can belong to any number of
groups.

A user in a group automatically has all the permissions granted to that
group. For example, if the group 'Site editors' has the permission
can_edit_home_page, any user in that group will have that permission.

Beyond permissions, groups are a convenient way to categorize users to
apply some label, or extended functionality, to them. For example, you
could create a group 'Special users', and you could write code that would
do special things to those users -- such as giving them access to a
members-only portion of your site, or sending them members-only email
messages.


*DB table: auth_group*'''

  id auto [pk, unique, not null]
  name char [unique, not null]

  indexes {
    (name) [unique, name: 'auth_group_name_key', type: btree]
    (id) [pk, unique, name: 'auth_group_pkey', type: btree]
  }
}


Table auth.Permission {
  Note: '''
The permissions system provides a way to assign permissions to specific
users and groups of users.

The permission system is used by the Django admin site, but may also be
useful in your own code. The Django admin site uses permissions as follows:

- The "add" permission limits the user's ability to view the "add" form
and add an object.
- The "change" permission limits a user's ability to view the change
list, view the "change" form and change an object.
- The "delete" permission limits the ability to delete an object.
- The "view" permission limits the ability to view an object.

Permissions are set globally per type of object, not per specific object
instance. It is possible to say "Mary may change news stories," but it's
not currently possible to say "Mary may change news stories, but only the
ones she created herself" or "Mary may only change news stories that have a
certain status or publication date."

The permissions listed above are automatically created for each model.


*DB table: auth_permission*'''

  id auto [pk, unique, not null]
  name char [not null]
  content_type_id foreign_key [not null]
  codename char [not null]

  indexes {
    (content_type_id) [name: 'auth_permission_content_type_id_2f476e4b', type: btree]
    (content_type_id,codename) [unique, name: 'auth_permission_content_type_id_codename_01ab375a_uniq', type: btree]
    (id) [pk, unique, name: 'auth_permission_pkey', type: btree]
  }
}
ref: auth.Permission.content_type_id > contenttypes.ContentType.id


Table auth.group_permissions {
  Note: '''
This is a Many-To-Many linking table autogenerated by Django.

*DB table: auth_group_permissions*'''

  id auto [pk, not null]
  permission_id auto
  group_id auto

  indexes {
    (group_id) [name: 'auth_group_permissions_group_id_b120cbf9', type: btree]
    (group_id,permission_id) [unique, name: 'auth_group_permissions_group_id_permission_id_0cd325b0_uniq', type: btree]
    (permission_id) [name: 'auth_group_permissions_permission_id_84c5c92e', type: btree]
    (id) [pk, unique, name: 'auth_group_permissions_pkey', type: btree]
  }
}
ref: auth.Group.id > auth.group_permissions.group_id
ref: auth.Permission.id > auth.group_permissions.permission_id


Table authtoken.Token {
  Note: '''
The default authorization token model.


*DB table: authtoken_token*'''

  key char [pk, unique, not null]
  user_id one_to_one [unique, not null]
  created date_time [not null]

  indexes {
    (key) [pk, unique, name: 'authtoken_token_pkey', type: btree]
    (user_id) [unique, name: 'authtoken_token_user_id_key', type: btree]
  }
}
ref: authtoken.Token.user_id - accounts.CustomUser.id


Table authtoken.TokenProxy {
  Note: '''
Proxy mapping pk to user pk for use in admin.


*DB table: authtoken_token*'''

  key char [pk, unique, not null]
  user_id one_to_one [unique, not null]
  created date_time [not null]

  indexes {
    (key) [pk, unique, name: 'authtoken_token_pkey', type: btree]
    (user_id) [unique, name: 'authtoken_token_user_id_key', type: btree]
  }
}
ref: authtoken.TokenProxy.user_id - accounts.CustomUser.id


Table community.Article {
  Note: '''
Article(id, user, category, title, content, created_at, updated_at)

*DB table: community_article*'''

  id big_auto [pk, unique, not null]
  user_id foreign_key [not null]
  category community.char_article_category [not null]
  title char [not null]
  content text [not null]
  created_at date_time [not null]
  updated_at date_time [not null]

  indexes {
    (id) [pk, unique, name: 'community_article_pkey', type: btree]
    (user_id) [name: 'community_article_user_id_2ae5b75d', type: btree]
  }
}
ref: community.Article.user_id > accounts.CustomUser.id


Table community.Comment {
  Note: '''
Comment(id, article, user, parent, content, created_at, updated_at)

*DB table: community_comment*'''

  id big_auto [pk, unique, not null]
  article_id foreign_key [not null]
  user_id foreign_key [not null]
  parent_id foreign_key [null]
  content text [not null]
  created_at date_time [not null]
  updated_at date_time [not null]

  indexes {
    (article_id) [name: 'community_comment_article_id_cd9775fb', type: btree]
    (parent_id) [name: 'community_comment_parent_id_2fd9f894', type: btree]
    (id) [pk, unique, name: 'community_comment_pkey', type: btree]
    (user_id) [name: 'community_comment_user_id_702f6fde', type: btree]
  }
}
ref: community.Comment.article_id > community.Article.id
ref: community.Comment.user_id > accounts.CustomUser.id
ref: community.Comment.parent_id > community.Comment.id


Table community.Like {
  Note: '''
Like(id, user, article, created_at)

*DB table: community_like*'''

  id big_auto [pk, unique, not null]
  user_id foreign_key [not null]
  article_id foreign_key [not null]
  created_at date_time [not null]

  indexes {
    (article_id) [name: 'community_like_article_id_b08d9957', type: btree]
    (id) [pk, unique, name: 'community_like_pkey', type: btree]
    (user_id) [name: 'community_like_user_id_690d9f50', type: btree]
    (user_id,article_id) [unique, name: 'community_like_user_id_article_id_f8135dcb_uniq', type: btree]
  }
}
ref: community.Like.user_id > accounts.CustomUser.id
ref: community.Like.article_id > community.Article.id


Table contenttypes.ContentType {
  Note: '''
ContentType(id, app_label, model)

*DB table: django_content_type*'''

  id auto [pk, unique, not null]
  app_label char [not null]
  model char [not null]

  indexes {
    (app_label,model) [unique, name: 'django_content_type_app_label_model_76bd3d3b_uniq', type: btree]
    (id) [pk, unique, name: 'django_content_type_pkey', type: btree]
  }
}


Table finlife.DepositInterest {
  Note: '''
DepositInterest(id, user, product, created_at)

*DB table: deposit_interest*'''

  id big_auto [pk, unique, not null]
  user_id foreign_key [not null]
  product_id foreign_key [not null]
  created_at date_time [not null]

  indexes {
    (id) [pk, unique, name: 'deposit_interest_pkey', type: btree]
    (product_id) [name: 'deposit_interest_product_id_828d78de', type: btree]
    (user_id) [name: 'deposit_interest_user_id_d2c79daf', type: btree]
    (user_id,product_id) [unique, name: 'deposit_interest_user_id_product_id_7eec9d35_uniq', type: btree]
  }
}
ref: finlife.DepositInterest.user_id > accounts.CustomUser.id
ref: finlife.DepositInterest.product_id > finlife.DepositProducts.id


Table finlife.DepositJoin {
  Note: '''
DepositJoin(id, user, product, joined_at)

*DB table: deposit_join*'''

  id big_auto [pk, unique, not null]
  user_id foreign_key [not null]
  product_id foreign_key [not null]
  joined_at date_time [not null]

  indexes {
    (id) [pk, unique, name: 'deposit_join_pkey', type: btree]
    (product_id) [name: 'deposit_join_product_id_2e87d81e', type: btree]
    (user_id) [name: 'deposit_join_user_id_8ea048df', type: btree]
    (user_id,product_id) [unique, name: 'deposit_join_user_id_product_id_8646d824_uniq', type: btree]
  }
}
ref: finlife.DepositJoin.user_id > accounts.CustomUser.id
ref: finlife.DepositJoin.product_id > finlife.DepositProducts.id


Table finlife.DepositOptions {
  Note: '''
DepositOptions(id, deposit_product, intr_rate_type, intr_rate_type_nm, save_trm, intr_rate, intr_rate2)

*DB table: finlife_depositoptions*'''

  id big_auto [pk, unique, not null]
  deposit_product_id foreign_key [not null]
  intr_rate_type char [not null]
  intr_rate_type_nm char [not null]
  save_trm integer [not null]
  intr_rate float [null]
  intr_rate2 float [null]

  indexes {
    (deposit_product_id) [name: 'finlife_depositoptions_deposit_product_id_acc3f3e6', type: btree]
    (id) [pk, unique, name: 'finlife_depositoptions_pkey', type: btree]
  }
}
ref: finlife.DepositOptions.deposit_product_id > finlife.DepositProducts.id


Table finlife.DepositProducts {
  Note: '''
DepositProducts(id, dcls_month, fin_co_no, kor_co_nm, fin_prdt_cd, fin_prdt_nm, join_way, mtrt_int, spcl_cnd, join_deny, etc_note, max_limit)

*DB table: finlife_depositproducts*'''

  id big_auto [pk, unique, not null]
  dcls_month text [not null]
  fin_co_no text [not null]
  kor_co_nm text [not null]
  fin_prdt_cd text [unique, not null]
  fin_prdt_nm text [not null]
  join_way text [not null]
  mtrt_int text [not null]
  spcl_cnd text [not null]
  join_deny integer [default:`0`, not null]
  etc_note text [not null]
  max_limit integer [null]

  indexes {
    (fin_prdt_cd) [unique, name: 'finlife_depositproducts_fin_prdt_cd_key', type: btree]
    (id) [pk, unique, name: 'finlife_depositproducts_pkey', type: btree]
  }
}


Table finlife.SavingInterest {
  Note: '''
SavingInterest(id, user, product, created_at)

*DB table: saving_interest*'''

  id big_auto [pk, unique, not null]
  user_id foreign_key [not null]
  product_id foreign_key [not null]
  created_at date_time [not null]

  indexes {
    (id) [pk, unique, name: 'saving_interest_pkey', type: btree]
    (product_id) [name: 'saving_interest_product_id_d47ea675', type: btree]
    (user_id) [name: 'saving_interest_user_id_b1eb0ea5', type: btree]
    (user_id,product_id) [unique, name: 'saving_interest_user_id_product_id_7b2ad079_uniq', type: btree]
  }
}
ref: finlife.SavingInterest.user_id > accounts.CustomUser.id
ref: finlife.SavingInterest.product_id > finlife.SavingProducts.id


Table finlife.SavingJoin {
  Note: '''
SavingJoin(id, user, product, joined_at)

*DB table: saving_join*'''

  id big_auto [pk, unique, not null]
  user_id foreign_key [not null]
  product_id foreign_key [not null]
  joined_at date_time [not null]

  indexes {
    (id) [pk, unique, name: 'saving_join_pkey', type: btree]
    (product_id) [name: 'saving_join_product_id_84d40cc0', type: btree]
    (user_id) [name: 'saving_join_user_id_f0c59291', type: btree]
    (user_id,product_id) [unique, name: 'saving_join_user_id_product_id_a6087ab1_uniq', type: btree]
  }
}
ref: finlife.SavingJoin.user_id > accounts.CustomUser.id
ref: finlife.SavingJoin.product_id > finlife.SavingProducts.id


Table finlife.SavingOptions {
  Note: '''
SavingOptions(id, saving_product, intr_rate_type, intr_rate_type_nm, rsrv_type, rsrv_type_nm, save_trm, intr_rate, intr_rate2)

*DB table: finlife_savingoptions*'''

  id big_auto [pk, unique, not null]
  saving_product_id foreign_key [not null]
  intr_rate_type char [not null]
  intr_rate_type_nm char [not null]
  rsrv_type text [not null]
  rsrv_type_nm text [not null]
  save_trm integer [not null]
  intr_rate float [null]
  intr_rate2 float [null]

  indexes {
    (id) [pk, unique, name: 'finlife_savingoptions_pkey', type: btree]
    (saving_product_id) [name: 'finlife_savingoptions_saving_product_id_d6c48548', type: btree]
  }
}
ref: finlife.SavingOptions.saving_product_id > finlife.SavingProducts.id


Table finlife.SavingProducts {
  Note: '''
SavingProducts(id, dcls_month, fin_co_no, kor_co_nm, fin_prdt_cd, fin_prdt_nm, join_way, mtrt_int, spcl_cnd, join_deny, etc_note, max_limit)

*DB table: finlife_savingproducts*'''

  id big_auto [pk, unique, not null]
  dcls_month text [not null]
  fin_co_no text [not null]
  kor_co_nm text [not null]
  fin_prdt_cd text [not null]
  fin_prdt_nm text [not null]
  join_way text [not null]
  mtrt_int text [not null]
  spcl_cnd text [not null]
  join_deny integer [default:`0`, not null]
  etc_note text [not null]
  max_limit integer [null]

  indexes {
    (id) [pk, unique, name: 'finlife_savingproducts_pkey', type: btree]
  }
}


Table sessions.Session {
  Note: '''
Django provides full support for anonymous sessions. The session
framework lets you store and retrieve arbitrary data on a
per-site-visitor basis. It stores data on the server side and
abstracts the sending and receiving of cookies. Cookies contain a
session ID -- not the data itself.

The Django sessions framework is entirely cookie-based. It does
not fall back to putting session IDs in URLs. This is an intentional
design decision. Not only does that behavior make URLs ugly, it makes
your site vulnerable to session-ID theft via the "Referer" header.

For complete documentation on using Sessions in your code, consult
the sessions documentation that is shipped with Django (also available
on the Django web site).


*DB table: django_session*'''

  session_key char [pk, unique, not null]
  session_data text [not null]
  expire_date date_time [not null]

  indexes {
    (expire_date) [name: 'django_session_expire_date_a5c62663', type: btree]
    (session_key) [pk, unique, name: 'django_session_pkey', type: btree]
  }
}


Table sites.Site {
  Note: '''
Site(id, domain, name)

*DB table: django_site*'''

  id auto [pk, unique, not null]
  domain char [unique, not null]
  name char [not null]

  indexes {
    (domain) [unique, name: 'django_site_domain_key', type: btree]
    (id) [pk, unique, name: 'django_site_pkey', type: btree]
  }
}


Table socialaccount.SocialAccount {
  Note: '''
SocialAccount(id, user, provider, uid, last_login, date_joined, extra_data)

*DB table: socialaccount_socialaccount*'''

  id auto [pk, unique, not null]
  user_id foreign_key [not null]
  provider char [not null]
  uid char [not null]
  last_login date_time [not null]
  date_joined date_time [not null]
  extra_data json [default:`builtins.dict()`, not null]

  indexes {
    (id) [pk, unique, name: 'socialaccount_socialaccount_pkey', type: btree]
    (provider,uid) [unique, name: 'socialaccount_socialaccount_provider_uid_fc810c6e_uniq', type: btree]
    (user_id) [name: 'socialaccount_socialaccount_user_id_8146e70c', type: btree]
  }
}
ref: socialaccount.SocialAccount.user_id > accounts.CustomUser.id


Table socialaccount.SocialApp {
  Note: '''
SocialApp(id, provider, provider_id, name, client_id, secret, key, settings)

*DB table: socialaccount_socialapp*'''

  id auto [pk, unique, not null]
  provider socialaccount.char_socialapp_provider [not null]
  provider_id char [not null]
  name char [not null]
  client_id char [note: '''App ID, or consumer key''', not null]
  secret char [note: '''API secret, client secret, or consumer secret''', not null]
  key char [note: '''Key''', not null]
  settings json [default:`builtins.dict()`, not null]

  indexes {
    (id) [pk, unique, name: 'socialaccount_socialapp_pkey', type: btree]
  }
}


Table socialaccount.SocialToken {
  Note: '''
SocialToken(id, app, account, token, token_secret, expires_at)

*DB table: socialaccount_socialtoken*'''

  id auto [pk, unique, not null]
  app_id foreign_key [null]
  account_id foreign_key [not null]
  token text [note: '''\"oauth_token\" (OAuth1) or access token (OAuth2)''', not null]
  token_secret text [note: '''\"oauth_token_secret\" (OAuth1) or refresh token (OAuth2)''', not null]
  expires_at date_time [null]

  indexes {
    (account_id) [name: 'socialaccount_socialtoken_account_id_951f210e', type: btree]
    (app_id) [name: 'socialaccount_socialtoken_app_id_636a42d7', type: btree]
    (app_id,account_id) [unique, name: 'socialaccount_socialtoken_app_id_account_id_fca4e0ac_uniq', type: btree]
    (id) [pk, unique, name: 'socialaccount_socialtoken_pkey', type: btree]
  }
}
ref: socialaccount.SocialToken.app_id > socialaccount.SocialApp.id
ref: socialaccount.SocialToken.account_id > socialaccount.SocialAccount.id


Table socialaccount.socialapp_sites {
  Note: '''
This is a Many-To-Many linking table autogenerated by Django.

*DB table: socialaccount_socialapp_sites*'''

  id auto [pk, not null]
  site_id auto
  socialapp_id auto

  indexes {
    (id) [pk, unique, name: 'socialaccount_socialapp_sites_pkey', type: btree]
    (site_id) [name: 'socialaccount_socialapp_sites_site_id_2579dee5', type: btree]
    (socialapp_id) [name: 'socialaccount_socialapp_sites_socialapp_id_97fb6e7d', type: btree]
    (socialapp_id,site_id) [unique, name: 'socialaccount_socialapp_sites_socialapp_id_site_id_71a9a768_uniq', type: btree]
  }
}
ref: socialaccount.SocialApp.id > socialaccount.socialapp_sites.socialapp_id
ref: sites.Site.id > socialaccount.socialapp_sites.site_id


Table spot.GoldPrice {
  Note: '''
GoldPrice(id, date, close_last, volume, open_price, high, low)

*DB table: spot_goldprice*'''

  id big_auto [pk, unique, not null]
  date date [unique, not null]
  close_last decimal [not null]
  volume decimal [not null]
  open_price decimal [not null]
  high decimal [not null]
  low decimal [not null]

  indexes {
    (date) [unique, name: 'spot_goldprice_date_key', type: btree]
    (id) [pk, unique, name: 'spot_goldprice_pkey', type: btree]
  }
}


Table spot.SilverPrice {
  Note: '''
SilverPrice(id, date, close_last, volume, open_price, high, low)

*DB table: spot_silverprice*'''

  id big_auto [pk, unique, not null]
  date date [unique, not null]
  close_last decimal [not null]
  volume decimal [not null]
  open_price decimal [not null]
  high decimal [not null]
  low decimal [not null]

  indexes {
    (date) [unique, name: 'spot_silverprice_date_key', type: btree]
    (id) [pk, unique, name: 'spot_silverprice_pkey', type: btree]
  }
}


